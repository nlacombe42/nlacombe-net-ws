buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
}

apply plugin: 'docker'

defaultTasks 'tasks'

group = 'net.nlacombe'
version = '0.1.0'

sourceCompatibility = 13
targetCompatibility = 13

def springCloudVersion = 'Hoxton.SR4'
project.ext.gcloudBuildDir = file('build/gcloud-build/')
project.ext.gcloudProjectId = 'nlacombe-net-prod'

String gcloudDockerImageUrl

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'javax.inject:javax.inject:1'
	implementation 'org.slf4j:slf4j-api:1.7.30'

	runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    runtimeOnly 'mysql:mysql-connector-java:8.0.18'
}

repositories {
	mavenCentral()
	mavenLocal()
}

wrapper {
	gradleVersion = '6.3'
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = false
	}
}

task buildDocker(type: Docker, dependsOn: assemble) {
	tag = "${project.name}"
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			from file('src/main/docker/')
			into stageDir
		}
	}
}

task buildGcloudDockerImage(type: Exec, dependsOn: assemble) {
	def buildStartTime = new Date()
	gcloudDockerImageUrl = getGcloudDockerImageUrl(buildStartTime)

	workingDir project.gcloudBuildDir
	commandLine 'gcloud', 'builds', 'submit', '--tag', gcloudDockerImageUrl

	doFirst {
		copy {
			from jar
			from file('src/main/docker/')
			into project.gcloudBuildDir
		}
	}
}

def getGcloudDockerImageUrl(date) {
	def version = project.version + '-' + getDateTimestamp(date)

	return "gcr.io/${project.gcloudProjectId}/${project.name}:${version}"
}

def static getDateTimestamp(date) {
	return date.format('yyyyMMddHHmmss')
}
